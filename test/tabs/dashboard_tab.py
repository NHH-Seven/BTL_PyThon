from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QFrame, QSizePolicy, QGridLayout, QSpacerItem)
from PySide6.QtGui import QFont, QIcon
from PySide6.QtCore import Qt, QTimer  # Th√™m QTimer

from database_connection import connect_db

class DashboardTab(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()
        self.setupTimer()  # Thi·∫øt l·∫≠p timer
        
    def initUI(self):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ trang ch·ªß
        title_frame = QFrame()
        title_frame.setStyleSheet("background-color: #f5f5f5; border-radius: 10px;")
        title_layout = QVBoxLayout(title_frame)
        
        title_label = QLabel("TRANG CH·ª¶ QU·∫¢N L√ù QU√ÅN CAFE")
        title_label.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_label.setStyleSheet("color: #1976D2; margin: 10px;")
        title_layout.addWidget(title_label)
        
        # Ph·∫ßn gi·ªõi thi·ªáu v·ªÅ qu√°n cafe
        intro_text = """
        <p style='font-size: 16px; line-height: 1.6; text-align: center;'>
        Ch√†o m·ª´ng ƒë·∫øn v·ªõi ph·∫ßn m·ªÅm qu·∫£n l√Ω qu√°n cafe c·ªßa ch√∫ng t√¥i! 
        H·ªá th·ªëng n√†y gi√∫p b·∫°n qu·∫£n l√Ω hi·ªáu qu·∫£ c√°c ho·∫°t ƒë·ªông kinh doanh, 
        t·ª´ b√°n h√†ng, qu·∫£n l√Ω s·∫£n ph·∫©m, ƒë·∫øn qu·∫£n l√Ω nh√¢n vi√™n v√† th·ªëng k√™ doanh thu.
        </p>
        """
        intro_label = QLabel(intro_text)
        intro_label.setWordWrap(True)
        intro_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_layout.addWidget(intro_label)
        
        main_layout.addWidget(title_frame)
        
        # Th·ªëng k√™ t·ªïng quan
        stats_grid = QGridLayout()
        stats_grid.setSpacing(20)
        
        # T·∫°o c√°c widget th·ªëng k√™
        self.stats_widgets = []
        stats_info = [
            ("üí∞ Doanh Thu H√¥m Nay", "0 VND", self.getDailyRevenue),
            ("üì¶ ƒê∆°n H√†ng H√¥m Nay", "0", self.getDailyOrders),
            ("üìä Doanh Thu Th√°ng N√†y", "0 VND", self.getMonthlyRevenue),
            ("üõí T·ªïng ƒê∆°n H√†ng", "0", self.getTotalOrders)
        ]
        
        row, col = 0, 0
        for title, default_value, update_func in stats_info:
            stats_widget = self.createStatsWidget(title, default_value)
            stats_grid.addWidget(stats_widget, row, col)
            self.stats_widgets.append((stats_widget, update_func))
            
            col += 1
            if col > 1:
                col = 0
                row += 1
        
        main_layout.addLayout(stats_grid)
        
        # Th√™m kho·∫£ng tr·ªëng ·ªü cu·ªëi
        main_layout.addItem(QSpacerItem(20, 40, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))
        
        # Th√™m th√¥ng tin c·∫≠p nh·∫≠t
        self.update_info = QLabel("D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 30 gi√¢y")
        self.update_info.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.update_info.setStyleSheet("color: #888; font-style: italic;")
        main_layout.addWidget(self.update_info)
        
        # C·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªëng k√™ l·∫ßn ƒë·∫ßu
        self.updateStats()
    
    def setupTimer(self):
        # T·∫°o timer ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t dashboard
        self.update_timer = QTimer(self)
        self.update_timer.timeout.connect(self.updateStats)
        # C·∫≠p nh·∫≠t m·ªói 30 gi√¢y (30000 ms) - c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh th·ªùi gian n√†y
        self.update_timer.start(30000)
        print("ƒê√£ thi·∫øt l·∫≠p timer c·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªói 30 gi√¢y")
    
    def createStatsWidget(self, title, value):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        widget = QFrame()
        widget.setStyleSheet("""
            QFrame {
                background-color: white;
                border-radius: 10px;
                border: 1px solid #ddd;
            }
        """)
        widget.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
        widget.setMinimumHeight(150)
        
        layout = QVBoxLayout(widget)
        
        title_label = QLabel(title)
        title_label.setFont(QFont("Arial", 14))
        title_label.setStyleSheet("color: #555;")
        layout.addWidget(title_label)
        
        value_label = QLabel(value)
        value_label.setFont(QFont("Arial", 22, QFont.Weight.Bold))
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        value_label.setStyleSheet("color: #1976D2; margin-top: 10px;")
        value_label.setObjectName("value_label")
        layout.addWidget(value_label)
        
        return widget
    
    def updateStats(self):
        print("ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªëng k√™...")
        # L∆∞u th·ªùi gian c·∫≠p nh·∫≠t cu·ªëi c√πng
        from datetime import datetime
        last_update = datetime.now().strftime("%H:%M:%S")
        
        # C·∫≠p nh·∫≠t gi√° tr·ªã cho t·ª´ng widget th·ªëng k√™
        for idx, (widget, update_func) in enumerate(self.stats_widgets):
            try:
                value = update_func()
                print(f"Widget {idx}: Gi√° tr·ªã m·ªõi l√† {value}")
                
                # T√¨m label gi√° tr·ªã b·∫±ng ObjectName
                value_label = widget.findChild(QLabel, "value_label")
                if value_label:
                    value_label.setText(value)
                    print(f"ƒê√£ c·∫≠p nh·∫≠t widget {idx} th√†nh c√¥ng")
                else:
                    print(f"Kh√¥ng t√¨m th·∫•y label cho widget {idx}")
            except Exception as e:
                print(f"L·ªói khi c·∫≠p nh·∫≠t widget {idx}: {str(e)}")
        
        # C·∫≠p nh·∫≠t th√¥ng tin v·ªÅ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi
        self.update_info.setText(f"D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 30 gi√¢y. C·∫≠p nh·∫≠t cu·ªëi: {last_update}")
    
    def getDailyRevenue(self):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        conn = connect_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT COALESCE(SUM(total_amount), 0) 
                    FROM orders 
                    WHERE DATE(order_date) = DATE(NOW())
                """)
                result = cursor.fetchone()
                print(f"Daily revenue query result: {result}")
                if result and result[0]:
                    revenue = float(result[0])
                    return f"{int(revenue):,} VND"
            except Exception as e:
                print(f"Error getting daily revenue: {str(e)}")
            finally:
                conn.close()
        else:
            print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu")
        return "0 VND"
    
    def getMonthlyRevenue(self):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        conn = connect_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT COALESCE(SUM(total_amount), 0) 
                    FROM orders 
                    WHERE YEAR(order_date) = YEAR(NOW()) 
                    AND MONTH(order_date) = MONTH(NOW())
                """)
                result = cursor.fetchone()
                print(f"Monthly revenue query result: {result}")
                if result and result[0]:
                    revenue = float(result[0])
                    return f"{int(revenue):,} VND"
            except Exception as e:
                print(f"Error getting monthly revenue: {str(e)}")
            finally:
                conn.close()
        else:
            print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu")
        return "0 VND"
    
    def getDailyOrders(self):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        conn = connect_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT COUNT(*) 
                    FROM orders 
                    WHERE DATE(order_date) = DATE(NOW())
                """)
                result = cursor.fetchone()
                print(f"Daily orders query result: {result}")
                if result:
                    return str(result[0])
            except Exception as e:
                print(f"Error getting daily orders: {str(e)}")
            finally:
                conn.close()
        else:
            print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu")
        return "0"
    
    def getTotalOrders(self):
        # Gi·ªØ nguy√™n ph·∫ßn c≈©
        conn = connect_db()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM orders")
                result = cursor.fetchone()
                print(f"Total orders query result: {result}")
                if result:
                    return str(result[0])
            except Exception as e:
                print(f"Error getting total orders: {str(e)}")
            finally:
                conn.close()
        else:
            print("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu")
        return "0"
        
    # Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ d·ª´ng timer khi tab kh√¥ng c√≤n ƒë∆∞·ª£c hi·ªÉn th·ªã
    def hideEvent(self, event):
        # T·∫°m d·ª´ng timer khi tab kh√¥ng hi·ªÉn th·ªã ƒë·ªÉ ti·∫øt ki·ªám t√†i nguy√™n
        self.update_timer.stop()
        super().hideEvent(event)
        
    def showEvent(self, event):
        # Kh·ªüi ƒë·ªông l·∫°i timer khi tab ƒë∆∞·ª£c hi·ªÉn th·ªã
        self.updateStats()  # C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
        self.update_timer.start()
        super().showEvent(event)